{
	"info": {
		"_postman_id": "084fa347-af76-4c12-89eb-22829a711c2b",
		"name": "Cat Facts API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1445947"
	},
	"item": [
		{
			"name": "Get Random Fact",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code validation",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Response time validation",
							"pm.test(\"Response time is below 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"// Content-Type validation",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"// JSON schema validation",
							"const schema = {",
							"    \"type\": \"object\",",
							"    \"required\": [\"status\", \"_id\", \"user\", \"text\", \"type\", \"deleted\", \"createdAt\", \"updatedAt\", \"__v\"],",
							"    \"properties\": {",
							"        \"status\": {",
							"            \"type\": \"object\",",
							"            \"properties\": {",
							"                \"verified\": { \"type\": [\"boolean\", \"null\"] },",
							"                \"sentCount\": { \"type\": \"number\" }",
							"            },",
							"            \"required\": [\"verified\", \"sentCount\"]",
							"        },",
							"        \"_id\": { \"type\": \"string\" },",
							"        \"user\": { \"type\": \"string\" },",
							"        \"text\": { \"type\": \"string\" },",
							"        \"type\": { \"type\": \"string\" },",
							"        \"deleted\": { \"type\": \"boolean\" },",
							"        \"createdAt\": { \"type\": \"string\", \"format\": \"date-time\" },",
							"        \"updatedAt\": { \"type\": \"string\", \"format\": \"date-time\" },",
							"        \"__v\": { \"type\": \"number\" }",
							"    }",
							"};",
							"",
							"pm.test(\"Schema is valid\", function () {",
							"    pm.response.to.have.jsonSchema(schema);",
							"});",
							"",
							"// Content validation",
							"pm.test(\"Fact content validation\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.text).to.be.a('string').that.is.not.empty; // Validate text field is a non-empty string",
							"    pm.expect(responseData.type).to.equal('cat'); // Validate fact type is 'cat'",
							"});",
							"",
							"// Cookie validation (Optional)",
							"pm.test(\"Set-Cookie header is present\", function () {",
							"    pm.expect(pm.response.headers.get('Set-Cookie')).to.exist;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://cat-fact.herokuapp.com/facts/random",
					"protocol": "https",
					"host": [
						"cat-fact",
						"herokuapp",
						"com"
					],
					"path": [
						"facts",
						"random"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Multiple Facts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code validation",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Amount validation",
							"const amount = 5;  // As per the request query parameter (?amount=5)",
							"pm.test(`Response contains ${amount} facts`, function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array').with.lengthOf(amount);",
							"});",
							"",
							"// JSON schema validation for each fact",
							"const factSchema = {",
							"    \"type\": \"object\",",
							"    \"required\": [\"status\", \"_id\", \"user\", \"text\", \"type\", \"deleted\", \"createdAt\", \"updatedAt\", \"__v\"],",
							"    \"properties\": {",
							"        \"status\": {",
							"            \"type\": \"object\",",
							"            \"properties\": {",
							"                \"verified\": { \"type\": [\"boolean\", \"null\"] },",
							"                \"sentCount\": { \"type\": \"number\" }",
							"            },",
							"            \"required\": [\"verified\", \"sentCount\"]",
							"        },",
							"        \"_id\": { \"type\": \"string\" },",
							"        \"user\": { \"type\": \"string\" },",
							"        \"text\": { \"type\": \"string\" },",
							"        \"type\": { \"type\": \"string\" },",
							"        \"deleted\": { \"type\": \"boolean\" },",
							"        \"createdAt\": { \"type\": \"string\", \"format\": \"date-time\" },",
							"        \"updatedAt\": { \"type\": \"string\", \"format\": \"date-time\" },",
							"        \"__v\": { \"type\": \"number\" }",
							"    }",
							"};",
							"",
							"// Validate each fact's structure",
							"pm.test(\"Each fact has the correct structure\", function () {",
							"    const responseData = pm.response.json();",
							"    responseData.forEach(fact => {",
							"        pm.expect(fact).to.have.jsonSchema(factSchema);",
							"    });",
							"});",
							"",
							"// Content validation",
							"pm.test(\"Each fact has valid text and type\", function () {",
							"    const responseData = pm.response.json();",
							"    responseData.forEach(fact => {",
							"        pm.expect(fact.text).to.be.a('string').that.is.not.empty;",
							"        pm.expect(fact.type).to.equal('cat');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://cat-fact.herokuapp.com/facts/random?amount={{amount}}",
					"protocol": "https",
					"host": [
						"cat-fact",
						"herokuapp",
						"com"
					],
					"path": [
						"facts",
						"random"
					],
					"query": [
						{
							"key": "amount",
							"value": "{{amount}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid Parameter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code validation",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Response validation for empty array",
							"pm.test(\"Response is an empty array\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array').that.is.empty;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://cat-fact.herokuapp.com/facts/random?amount=invalid",
					"protocol": "https",
					"host": [
						"cat-fact",
						"herokuapp",
						"com"
					],
					"path": [
						"facts",
						"random"
					],
					"query": [
						{
							"key": "amount",
							"value": "invalid"
						}
					]
				}
			},
			"response": []
		}
	]
}