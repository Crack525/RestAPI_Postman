{
	"info": {
		"_postman_id": "b3c34ffe-33c5-401d-9d03-f6c6b0d9d028",
		"name": "PoetryDB API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1445947"
	},
	"item": [
		{
			"name": "Get Random Poem",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code validation",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Response time validation",
							"pm.test(\"Response time is acceptable\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);  // Ensure response time is less than 1000ms",
							"});",
							"",
							"// Schema validation",
							"const schema = {",
							"    \"type\": \"array\",",
							"    \"items\": {",
							"        \"type\": \"object\",",
							"        \"required\": [\"title\", \"author\", \"lines\", \"linecount\"],",
							"        \"properties\": {",
							"            \"title\": { \"type\": \"string\" },",
							"            \"author\": { \"type\": \"string\" },",
							"            \"lines\": { ",
							"                \"type\": \"array\",",
							"                \"items\": { \"type\": \"string\" }",
							"            },",
							"            \"linecount\": { \"type\": \"string\" }  // Updated to string, as linecount might be in quotes",
							"        }",
							"    }",
							"};",
							"",
							"pm.test(\"Schema validation\", function () {",
							"    pm.response.to.have.jsonSchema(schema);",
							"});",
							"",
							"// Data presence validation",
							"pm.test(\"Response contains required data\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    // Check that the response is a non-empty array",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    // Validate that the first poem object has required fields",
							"    const poem = responseData[0];",
							"    pm.expect(poem.title).to.be.a('string').that.is.not.empty;",
							"    pm.expect(poem.author).to.be.a('string').that.is.not.empty;",
							"    pm.expect(poem.lines).to.be.an('array').that.is.not.empty;",
							"    ",
							"    // Ensure linecount is present and valid",
							"    pm.expect(poem.linecount).to.be.a('string').that.is.not.empty;",
							"    ",
							"    // Check that the lines array contains valid string lines",
							"    poem.lines.forEach(line => {",
							"        pm.expect(line).to.be.a('string');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://poetrydb.org/random",
					"protocol": "https",
					"host": [
						"poetrydb",
						"org"
					],
					"path": [
						"random"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Poem by Author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code validation",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Author validation",
							"const author = pm.variables.get(\"author\");",
							"pm.test(\"All poems are by specified author\", function () {",
							"    const responseData = pm.response.json();",
							"    responseData.forEach(poem => {",
							"        pm.expect(poem.author.toLowerCase()).to.equal(author.toLowerCase());",
							"    });",
							"});",
							"",
							"// Data structure validation",
							"pm.test(\"Response structure is correct\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array');",
							"    if(responseData.length > 0) {",
							"        pm.expect(responseData[0]).to.have.all.keys('title', 'author', 'lines', 'linecount');",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://poetrydb.org/author/{{author}}",
					"protocol": "https",
					"host": [
						"poetrydb",
						"org"
					],
					"path": [
						"author",
						"{{author}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid Author Search",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code validation for not found",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);  // Since the API returns a 200 status code",
							"});",
							"",
							"// Error response validation (for 404 status in response body)",
							"pm.test(\"Response contains a 404 status in the body\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property('status', 404);",
							"    pm.expect(responseData).to.have.property('reason').that.is.a('string').and.equals('Not found');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://poetrydb.org/author/NonExistentAuthor12345",
					"protocol": "https",
					"host": [
						"poetrydb",
						"org"
					],
					"path": [
						"author",
						"NonExistentAuthor12345"
					]
				}
			},
			"response": []
		}
	]
}